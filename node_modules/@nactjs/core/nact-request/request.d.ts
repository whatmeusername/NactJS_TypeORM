/// <reference types="node" />
/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { RouteChild, NactLogger } from "../index";
import { NactUrlParseQuery, NactSendFileOption } from "./index";
import { Socket } from "net";
declare class RouteHandlerData {
    private ControllerInstance;
    private routeClass;
    private routeMethod;
    private routeData;
    private routeArgs;
    constructor(rc: new (...args: any) => any, rm: ((...args: any[]) => any) | undefined, rd: RouteChild);
    set __routeMethod(value: (...args: any[]) => any);
    set __routeArgs(value: any[]);
    callMethod(): any;
    getArgs(): any[];
    getHandlerClass(): object;
    getHandler(): ((...args: any[]) => any) | undefined;
    getRouteData(): RouteChild;
}
declare class NactServerResponse extends ServerResponse {
    private ctx?;
    constructor(req: IncomingMessage);
    set __ctx(ctx: NactRequest);
    getCtx(): NactRequest | undefined;
    isSended(): boolean;
    json(body: {
        [K: string]: any;
    }): NactServerResponse;
    send(data?: any): NactServerResponse;
    contentType(type: string): NactServerResponse;
    status(code: number): NactServerResponse;
    header(header: string, value: boolean | number | string | null | string[]): NactServerResponse;
    length(length: number): NactServerResponse;
}
declare class NactIncomingMessage extends IncomingMessage {
    protected body: any;
    private ctx?;
    constructor(socket: Socket);
    set __ctx(ctx: NactRequest);
    getBody(): any;
    getHeader(name: string): string | string[] | null;
}
declare class NactRequest {
    private request;
    private response;
    protected readonly handler: RouteHandlerData | null;
    private host;
    private origin;
    private method;
    private ip;
    private protocol;
    private urldata;
    private payload;
    protected __logger: NactLogger;
    constructor(req: NactIncomingMessage, res: NactServerResponse);
    set __handler(__handler: RouteHandlerData);
    getHandlerClass(): object | undefined;
    getHandler(): ((...args: any[]) => any) | undefined;
    getHandlerData(): RouteHandlerData | null;
    getRouteData(): RouteChild | undefined;
    getPayload(): any | undefined;
    getURLData(): NactUrlParseQuery;
    getRequest(): NactIncomingMessage;
    getResponse(): NactServerResponse;
    getProtocol(): string;
    getMethod(): string | null;
    getHost(): string | null;
    getOrigin(): string | null;
    getIP(): string | null;
    setPayload(payload: any): any;
    isSended(): boolean;
    send(): NactRequest;
    sendFile(path: string, options?: NactSendFileOption): void;
}
export { NactRequest, RouteHandlerData, NactServerResponse, NactIncomingMessage };
//# sourceMappingURL=request.d.ts.map