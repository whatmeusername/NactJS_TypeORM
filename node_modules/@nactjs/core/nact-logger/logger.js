"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNactLogger = exports.createSharedNactLogger = exports.NactLogger = void 0;
const colors = {
    Reset: "\x1b[0m",
    Bright: "\x1b[1m",
    Dim: "\x1b[2m",
    Underscore: "\x1b[4m",
    Blink: "\x1b[5m",
    Reverse: "\x1b[7m",
    Hidden: "\x1b[8m",
    black: "\x1b[30m",
    red: "\x1b[31m",
    green: "\x1b[32m",
    yellow: "\x1b[33m",
    blue: "\x1b[34m",
    magenta: "\x1b[35m",
    cyan: "\x1b[36m",
    white: "\x1b[37m",
};
let logger = null;
function createSharedNactLogger(settings) {
    logger = new NactLogger(settings);
    return logger;
}
exports.createSharedNactLogger = createSharedNactLogger;
function getNactLogger() {
    if (logger === null) {
        logger = new NactLogger();
    }
    return logger;
}
exports.getNactLogger = getNactLogger;
class NactLogger {
    logColor;
    warningColor;
    errorColor;
    infoColor;
    isEnable;
    constructor(settings) {
        this.logColor = colors.green;
        this.warningColor = colors.yellow;
        this.errorColor = colors.red;
        this.infoColor = colors.blue;
        this.isEnable = settings?.isEnable ?? true;
    }
    __color(color, message, type) {
        if (this.isEnable) {
            if (type) {
                if (type === "warning")
                    console.warn(color, message, colors.Reset);
                else if (type === "error")
                    console.error(color, message, colors.Reset);
                else if (type === "info")
                    console.info(color, message, colors.Reset);
            }
            else
                console.log(color, message, colors.Reset);
        }
    }
    getTime(inheritColor, useColor = false) {
        const date = new Date().toLocaleTimeString("en-GB", { day: "numeric", month: "short" });
        return `${useColor ? "" : colors.black} ${date} ${useColor ? "" : inheritColor}`;
    }
    log(message) {
        const prefix = "[NACT LOG]";
        const color = `${this.logColor}`;
        const startsWith = [this.getTime(color), prefix].join(" ");
        this.__color(color, `${startsWith} ${message}`);
    }
    error(message) {
        const prefix = "[NACT ERROR]";
        const color = `${this.errorColor}`;
        const startsWith = [this.getTime(color), prefix].join(" ");
        const errorMessage = `${color}${startsWith} ${message}${colors.Reset}`;
        throw new Error(errorMessage);
    }
    warning(message) {
        const prefix = "[NACT WARNING]";
        const color = `${this.warningColor}`;
        const startsWith = [this.getTime(color), prefix].join(" ");
        this.__color(color, `${startsWith} ${message}`, "warning");
    }
    info(message, subprefix) {
        const prefix = `[NACT INFO${subprefix ? " / " + subprefix.toUpperCase() : ""}]`;
        const color = `${this.infoColor}`;
        const startsWith = [this.getTime(color), prefix].join(" ");
        this.__color(color, `${startsWith} ${message}`, "info");
    }
}
exports.NactLogger = NactLogger;
