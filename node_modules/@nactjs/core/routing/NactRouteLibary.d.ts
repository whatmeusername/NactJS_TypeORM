import type { NactRoutes, RouteChild, NactLibraryConfig } from "./index";
import { NactRouteData, NactRouteMethodData, NactServer } from "../index";
import type { PathWalkerParams } from "./interface";
import type { NactLogger, NactRequest } from "../index";
import { NactRouter } from "./router-class";
declare type ClassInst = {
    new (): any;
};
declare type ObjectType<T> = {
    [K: string]: T;
};
declare type regexpVariables = {
    presets: ObjectType<RegExp | string>;
    variables: ObjectType<string>;
};
declare const getRegexpPresets: () => regexpVariables;
declare class NactRouteLibrary {
    private readonly app;
    protected __routes: NactRoutes;
    protected __logger: NactLogger;
    regexpVariables: regexpVariables;
    constructor(app: NactServer, controllers?: ClassInst[], config?: NactLibraryConfig);
    registerController(controllerClass: ClassInst | ClassInst[]): void;
    protected walkRoute(Router: NactRouter, params: PathWalkerParams): RouteChild | null;
    getRouteParams(rc: any, routeKEY: string, req: NactRequest): any[];
    getRouteMethodOr404(req: NactRequest): NactRouter | undefined;
    getRouteMetadata(desc: (...args: any[]) => any, key: string): NactRouteData | undefined;
    getRouteMetadata(desc: (...args: any[]) => any, key: string, dataOnly: true): RouteChild[] | undefined;
    getRouteMetadata(desc: (...args: any[]) => any, key: string, dataOnly: false): NactRouteData | undefined;
    getOrSetMetadataForRoute(controller: any, descriptorKey: string, method: string, overidedPaths?: string[]): NactRouteMethodData | undefined;
    clear(): void;
}
export { NactRouteLibrary, getRegexpPresets, NactRouter };
//# sourceMappingURL=NactRouteLibary.d.ts.map