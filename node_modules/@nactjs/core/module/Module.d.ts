import type { ProviderData, ControllerData, ExportData, NactModuleSettings, NactCustomProviderSettings, NactCustomProvider } from "./index";
declare class NactModule {
    protected readonly __moduleToken: string;
    readonly transferModuleKey: string;
    readonly __moduleSettings: NactModuleSettings | null;
    __isInited: boolean;
    protected import: any[];
    protected export: ExportData[];
    protected providers: ProviderData[];
    protected controllers: ControllerData[];
    constructor(settings: NactModuleSettings, transferModuleKey?: string);
    getExports(): ExportData[];
    getImports(): any[];
    getProviders(): ProviderData[];
    getControllers(): ControllerData[];
    initialize(settings?: NactModuleSettings): void;
    finishInitialization(): void;
    getModuleToken(): string;
    setUniqueToken(object: any, prefix?: string): string;
    getProvider(providerNameOrToken: string | {
        new (...args: any[]): any;
    } | (new (...args: any[]) => any)): ProviderData | undefined;
    getProviderFromImport(providerName: string): any;
    getProviderFromSettings(providerName: string): any | undefined;
    protected __getProviderParams(provider: ProviderData | NactCustomProvider): Array<any> | null;
    __updateProvider(providerToken: string): ProviderData | null;
    protected __resolveCustomProvider(customProvider: NactCustomProvider): ProviderData;
    protected __resolveProviderInstance(provider: ProviderData, instance: any): void;
    protected __registerProvider: (provider: any | NactCustomProvider) => ProviderData | undefined;
    protected __registerController(controller: any): void;
    hasProvider(providerName: string, shouldBeResolved?: boolean): boolean;
    protected __isUsingUnresolvedImports(provider: any): boolean;
    protected __mapProviders(providers: any[]): void;
    protected __mapControllers(controllers: any[]): void;
    __loadExports(exports: any[]): void;
}
declare function createModule(settings: NactModuleSettings, transferModulesKey?: string): string;
declare function createProvider(settings: NactCustomProviderSettings): NactCustomProvider;
export { createProvider, createModule, NactModule };
//# sourceMappingURL=Module.d.ts.map