import CoreModule from "./CoreModule";
import type { NactModuleSettings, TransferModuleExportsOrImport, ProviderLocation } from "./index";
import { NactModule } from "./index";
import { NactListernerEvent } from "../application";
declare function createNewTransferModule(key?: string): NactTransferModule;
declare function getTransferModule(key?: string): NactTransferModule;
interface NactRootModuleSettings extends Omit<NactModuleSettings, "import"> {
    controllers?: any[];
    providers?: any[];
    exports?: any[];
}
declare function createRootModule(settings: NactRootModuleSettings, key: string): NactModule;
declare class NactTransferModule {
    protected readonly __modules: NactModule[];
    protected readonly __exports: TransferModuleExportsOrImport[];
    protected readonly __rootModules: NactModule[];
    protected __phase: "preparing" | "resolving" | "ready";
    protected __asyncQueryCount: number;
    readonly key: string;
    protected __providersLocator: ProviderLocation[];
    constructor(key: string);
    get length(): number;
    emitProviderEvent(event: NactListernerEvent, key: string): void;
    emitAllProviderEvent(event: NactListernerEvent): void;
    getProviderLocator(): ProviderLocation[];
    getCoreModule(): CoreModule | undefined;
    append(module: NactModule | NactModule[]): void;
    useRootModule(settings: NactRootModuleSettings): void;
    useModule(settings: NactModuleSettings): string;
    hasModule(moduleKey: string): boolean;
    initialize(): Promise<void>;
    protected __getProviderFromLocation(ProviderName: string): any;
    protected __beginResolvingPhase(): void;
    protected __closingResolvingPhase(): void;
    protected __InitModuleSync(module: NactModule): void;
    protected __InitModuleAsync(module: NactModule): Promise<void>;
    getProviderFromLocationByName(ProviderName: string | {
        new (): void;
    }): any;
    getModulesControllers(instanceOnly?: boolean): any[];
    protected __getExports(module: NactModule): void;
    protected __providerCanBeImported(providerName: string): boolean;
    protected __resolveModuleImports(module: NactModule, imports?: any[]): void;
    protected __isModuleUsingRootImports(module: NactModule): {
        r: boolean;
        p: string[];
    };
}
export type { NactRootModuleSettings };
export { NactTransferModule, createRootModule, getTransferModule, createNewTransferModule };
//# sourceMappingURL=TransferModule.d.ts.map