/// <reference types="node" />
import "reflect-metadata";
import type { Server } from "http";
import { NactLogger } from "../nact-logger/logger";
import { NactRouteLibrary } from "../routing/NactRouteLibary";
import { NactRequest, NactServerResponse, NactIncomingMessage } from "../nact-request";
import { NactTransferModule } from "../module";
import type { InjectRequest, NactListernerEvent, serverSettings } from "./interface";
import { HttpExpectionHandler } from "../expections";
declare type NactMiddleware = (req: NactRequest) => any;
declare class NactGlobalConfig {
    private readonly server;
    private middleware;
    private handlers;
    constructor(server: NactServer);
    getGlobalMiddleware(): NactMiddleware[];
    getHandlers(): HttpExpectionHandler[];
    getHandlers(name: string): HttpExpectionHandler | undefined;
    addGlobalHandler(handler: (new (...args: any[]) => HttpExpectionHandler) | (new (...args: any[]) => HttpExpectionHandler)[]): void;
    addGlobalMiddleware(middleware: NactMiddleware | NactMiddleware[]): void;
}
declare class NactServer {
    protected server: Server;
    private serverRunningURL;
    private serverPort;
    protected RouteLibrary: NactRouteLibrary;
    private IPv4;
    private logger;
    private GlobalConfig;
    private running;
    private transferModuleKey;
    private listeners;
    constructor(transferModuleKey?: string, serverSetting?: serverSettings);
    on(event: NactListernerEvent, cb: () => void): void;
    emit(event: NactListernerEvent): void;
    getGlobalConfig(): NactGlobalConfig;
    useMiddleware(middleware: (req: NactRequest) => void): this;
    useHandler(handler: new (...args: any[]) => HttpExpectionHandler): this;
    getServerURL(): string | null;
    getServer(): Server;
    getLogger(): NactLogger;
    getTransferModuleKey(): string;
    protected __initialize(): Promise<void>;
    protected __messageOnInitilizationEnd(): void;
    protected __getLocalMachineIP(): void;
    protected __RequestHandler: (req: NactIncomingMessage, res: NactServerResponse) => void;
    protected __executeRequest(request: NactRequest): Promise<NactRequest | undefined>;
    getTransferModule(): NactTransferModule;
    get(): Server;
    listen(port: number): this;
    offline(): Promise<this>;
    resetConfiguration(): void;
    clearModuleConfiguration(cb?: (transferModuleKey: string, transferModule: NactTransferModule) => void): Promise<void>;
    injectRequest(RequestData: InjectRequest): Promise<NactRequest>;
}
export { NactServer };
//# sourceMappingURL=nact-application.d.ts.map