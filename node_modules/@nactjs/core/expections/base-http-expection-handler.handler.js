"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExpectionObject = exports.BaseHttpExpectionHandler = exports.HttpExpectionHandler = void 0;
const router_const_1 = require("../nact-constants/router.const");
const Reflector_1 = require("../Reflector");
const shared_1 = require("../shared");
const base_http_expection_expection_1 = require("./base-http-expection.expection");
const utils_1 = require("./utils");
const nact_constants_1 = require("../nact-constants");
class HttpExpectionHandler {
    acceptExpections;
    acceptAny;
    constructor() {
        this.acceptExpections = [];
        this.acceptAny = this.acceptExpections.length === 0;
        this.__getAcceptNames();
    }
    __getAcceptNames() {
        const acceptExpections = Reflector_1.Reflector.get(router_const_1.HANDLER__ALLOWED__EXPECTIONS, this);
        this.acceptExpections = (0, utils_1.getNamesForExpectionHandler)(acceptExpections);
        this.acceptAny = this.acceptExpections.length === 0;
    }
    canAccept(expection) {
        if (!this.acceptAny && expection instanceof base_http_expection_expection_1.HttpExpection) {
            const expectionName = expection instanceof Error ? expection.constructor.name : "";
            return this.acceptExpections.includes(expectionName);
        }
        return true;
    }
    accept(expection, ctx) {
        if (this.canAccept(expection)) {
            this.catch(expection, ctx);
            return true;
        }
        return false;
    }
}
exports.HttpExpectionHandler = HttpExpectionHandler;
function isExpectionObject(expection) {
    return (0, shared_1.isObject)(expection) && expection?.message !== undefined && !expection.statusCode !== undefined;
}
exports.isExpectionObject = isExpectionObject;
class BaseHttpExpectionHandler extends HttpExpectionHandler {
    catch(expection, ctx) {
        if (expection instanceof base_http_expection_expection_1.HttpExpection) {
            const response = ctx.getResponse();
            const resBody = expection.getBody();
            if (isExpectionObject(resBody)) {
                response.status(expection.getStatus());
                response.json(resBody);
                return true;
            }
            else {
                return this.handleUnknowException(expection, ctx);
            }
        }
        else {
            return this.handleUnknowException(expection, ctx);
        }
    }
    handleUnknowException(expection, ctx) {
        const response = ctx.getResponse();
        const res = isExpectionObject(expection)
            ? { statusCode: expection.statusCode, message: expection.message }
            : { statusCode: nact_constants_1.HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR, message: nact_constants_1.HTTP_STATUS_MESSAGES.InternalServerError };
        ctx.setPayload(res);
        response.json(res);
        return true;
    }
}
exports.BaseHttpExpectionHandler = BaseHttpExpectionHandler;
