"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControllerExpectionsHandler = void 0;
const module_1 = require("../module");
const utils_1 = require("../routing/utils");
const shared_1 = require("../shared");
const nact_constants_1 = require("../nact-constants");
function mapHandlers(handlers) {
    const res = [];
    if (handlers) {
        handlers.fns.forEach((handler) => {
            if ((0, shared_1.isInitializedClass)(handler.instance)) {
                res.push(handler.instance);
            }
        });
    }
    return res;
}
const ERROR_MESSAGES = {
    IS_NOT_CONTROLLER: "Tried to assign controller only expection handler for non controller instance",
};
class ControllerExpectionsHandler {
    router;
    logger;
    handlers;
    constructor(app, RouterClass) {
        this.handlers = [];
        this.logger = app.getLogger();
        this.router = this.__setRouter(RouterClass);
        this.__getFilters(app);
    }
    __setRouter(RouterClass) {
        if ((0, module_1.isController)(RouterClass.constructor)) {
            return RouterClass;
        }
        else {
            this.logger.error(ERROR_MESSAGES.IS_NOT_CONTROLLER);
        }
    }
    __getFilters(app) {
        const global = app.getGlobalConfig().getHandlers();
        const controller = (0, utils_1.getRouteConfig)(this.router);
        const contorllerInstances = mapHandlers(controller?.handlers);
        this.handlers = [...contorllerInstances, ...global];
    }
    handle(expection, ctx) {
        const routeMethod = ctx.getHandler();
        const methodHandlers = Reflect.getMetadata(nact_constants_1.ROUTE__CONFIG, routeMethod ?? {})?.handlers;
        const instances = mapHandlers(methodHandlers);
        const orderedFilters = [...instances, ...this.handlers];
        for (let i = 0; i < orderedFilters.length; i++) {
            const filter = orderedFilters[i];
            if (filter.accept(expection, ctx)) {
                return true;
            }
        }
        return false;
    }
}
exports.ControllerExpectionsHandler = ControllerExpectionsHandler;
